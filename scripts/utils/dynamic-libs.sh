#!/usr/bin/env bash

usage() {
	local old_xtrace
	old_xtrace="$(shopt -po xtrace || :)"
	set +o xtrace
	echo "${script_name} - List dynamic library dependencies." >&2
	echo "Usage: ${script_name} [flags] file|directory" >&2
	echo "Option flags:" >&2
	echo "  -h --help        - Show this help and exit." >&2
	echo "  -v --verbose     - Verbose execution." >&2
	echo "  -g --debug       - Extra verbose execution." >&2
	eval "${old_xtrace}"
}

process_opts() {
	local short_opts="hvg"
	local long_opts="help,verbose,debug"

	local opts
	opts=$(getopt --options ${short_opts} --long ${long_opts} -n "${script_name}" -- "$@")

	eval set -- "${opts}"

	while true ; do
		#echo "${FUNCNAME[0]}: @${1}@ @${2}@"
		case "${1}" in
		-h | --help)
			usage=1
			shift
			;;
		-v | --verbose)
			verbose=1
			shift
			;;
		-g | --debug)
			verbose=1
			debug=1
			set -x
			shift
			;;
		--)
			shift
			if [[ ${1} ]]; then
				src_path="${1}"
				shift
			fi
			if [[ ${*} ]]; then
				set +o xtrace
				echo "${script_name}: ERROR: Got extra args: '${*}'" >&2
				usage
				exit 1
			fi
			break
			;;
		*)
			echo "${script_name}: ERROR: Internal opts: '${*}'" >&2
			exit 1
			;;
		esac
	done
}

on_exit() {
	local result=${1}

	set +x
	echo "${script_name}: Done : ${result}." >&2
}

print_paths() {
	local name="${1}"
	local paths="${2}"

	paths="${paths%:}"

	echo "${name}"

	readarray -d ':' -t p_array <<< "${paths}"

	local i
	for (( i = 0; i < ${#p_array[@]}; i++ )); do
		p_array[i]="${p_array[i]//[$'\n']}"
		echo " $(( i + 1 )): [${p_array[i]}]"
	done
}

#===============================================================================
export PS4='\[\e[0;33m\]+ ${BASH_SOURCE##*/}:${LINENO}:(${FUNCNAME[0]:-"?"}):\[\e[0m\] '
script_name="${0##*/}"
base_name="${script_name##*/%}"
base_name="${base_name%.sh}"

SCRIPTS_TOP=${SCRIPTS_TOP:-"$(cd "${BASH_SOURCE%/*}" && pwd)"}

start_time="$(date +%Y.%m.%d-%H.%M.%S)"
SECONDS=0

trap "on_exit 'failed.'" EXIT
set -o pipefail
set -e

source "${SCRIPTS_TOP}/../lib/util.sh"

process_opts "${@}"

if [[ ${usage} ]]; then
	usage
	trap - EXIT
	exit 0
fi

readelf="${readelf:-readelf}"

if ! check_progs "${readelf}"; then
	exit 1
fi

src_path="$(realpath "${src_path}")"

declare -a files

if [[ -d "${src_path}" ]]; then
	readarray -t files < <(find "${src_path}" -type f | sort)
elif [[ -f "${src_path}" ]]; then
	files="${src_path}"
else
	echo "${script_name}: ERROR: Source path not found: '${src_path}'" >&2
	usage
	exit 1
fi

echo ''
echo "Generated by ${script_name} (TDD Project) - ${start_time}"
echo "https://github.com/glevand/tdd-project"
echo ''
echo "Source path = '${src_path}'"

lib_regex="^[^(]+\(NEEDED\) *(Shared library: .+)$"

rpath_regex="^[^(]+\(RPATH\) *(Library rpath: .+)$"

runpath_regex="^[^(]+\(RUNPATH\) *(Library runpath: )\[(.+)\]$"

for f in "${files[@]}"; do
	# f="${f//[$'\t\r\n ']}"
	if data="$("${readelf}" -d "${f}" 2>/dev/null)"; then
		echo "----------------------------"
		echo "File = '${f}'"
		echo ""
		while read -r line; do
			#echo "line = '${line}'"
			if [[ "${line}" =~ ${lib_regex} ]]; then
				#echo "match = '${BASH_REMATCH[0]}'"
				echo "${BASH_REMATCH[1]}"
			elif [[ "${line}" =~ ${rpath_regex} ]]; then
				#echo "match = '${BASH_REMATCH[0]}'"
				echo ""
				print_paths "${BASH_REMATCH[1]}"
			elif [[ "${line}" =~ ${runpath_regex} ]]; then
				#echo "match = '${BASH_REMATCH[0]}'"
				echo ""
				print_paths "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}"
			fi
		done< <(echo "${data}")
		echo ''
	fi
done

trap "on_exit 'Success'" EXIT
exit 0
